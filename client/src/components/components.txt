import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Car, RefreshCw, ParkingSquare, Bell, 
  CheckCircle, AlertCircle, Calendar, Upload,
  Check, CheckCheck, Trash2, Menu, X, ChevronRight
} from 'lucide-react';

// Mock Data
const mockVehicles = [
  {
    id: '1',
    userId: 'user1',
    plateNumber: 'ABC 1234',
    vehicleType: 'car',
    brand: 'Toyota',
    model: 'Vios',
    color: 'White',
    status: 'approved',
    expiryDate: '2025-12-31',
    renewalHistory: [
      { id: 'r1', renewalDate: '2024-12-31', expiryDate: '2025-12-31' }
    ]
  },
  {
    id: '2',
    userId: 'user1',
    plateNumber: 'XYZ 5678',
    vehicleType: 'motorcycle',
    brand: 'Honda',
    model: 'Wave 110',
    color: 'Black',
    status: 'approved',
    expiryDate: '2025-11-15',
    renewalHistory: []
  }
];

const mockNotifications = [
  {
    id: '1',
    type: 'warning',
    title: 'Registration Expiring Soon',
    message: 'Your vehicle ABC 1234 registration will expire in 30 days.',
    read: false,
    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
  },
  {
    id: '2',
    type: 'success',
    title: 'Vehicle Approved',
    message: 'Your vehicle XYZ 5678 has been approved for parking.',
    read: false,
    createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
  },
  {
    id: '3',
    type: 'info',
    title: 'Parking Slot Reserved',
    message: 'You have successfully reserved slot A-15.',
    read: true,
    createdAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString()
  }
];

const generateMockSlots = () => {
  const slots = [];
  const zones = ['A', 'B', 'C', 'D'];
  const statuses = ['available', 'occupied', 'reserved'];
  
  zones.forEach(zone => {
    for (let i = 1; i <= 20; i++) {
      slots.push({
        id: `${zone}-${i}`,
        zone,
        slotNumber: `${zone}-${i}`,
        status: statuses[Math.floor(Math.random() * statuses.length)]
      });
    }
  });
  
  return slots;
};

// VehicleRegistrationForm Component
const VehicleRegistrationForm = () => {
  const [formData, setFormData] = useState({
    plateNumber: '',
    vehicleType: '',
    brand: '',
    model: '',
    color: '',
  });
  const [orcrFile, setOrcrFile] = useState(null);
  const [driverIdFile, setDriverIdFile] = useState(null);
  const [submitted, setSubmitted] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    
    setTimeout(() => {
      setSubmitted(true);
      
      setTimeout(() => {
        setFormData({
          plateNumber: '',
          vehicleType: '',
          brand: '',
          model: '',
          color: '',
        });
        setOrcrFile(null);
        setDriverIdFile(null);
        setSubmitted(false);
      }, 3000);
    }, 1000);
  };

  if (submitted) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center py-8">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-xl mb-2 font-semibold">Registration Submitted!</h3>
            <p className="text-gray-600">
              Your vehicle registration has been submitted for admin approval.
              You will receive a notification once it's reviewed.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Car className="h-5 w-5" />
          Vehicle Registration
        </CardTitle>
        <CardDescription>
          Register your vehicle for parking privileges at PHINMA University of Iloilo
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="plateNumber">Plate Number *</Label>
              <Input
                id="plateNumber"
                placeholder="ABC 1234"
                value={formData.plateNumber}
                onChange={(e) => setFormData({ ...formData, plateNumber: e.target.value })}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="vehicleType">Vehicle Type *</Label>
              <Select
                value={formData.vehicleType}
                onValueChange={(value) => setFormData({ ...formData, vehicleType: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="motorcycle">Motorcycle</SelectItem>
                  <SelectItem value="car">Car</SelectItem>
                  <SelectItem value="suv">SUV</SelectItem>
                  <SelectItem value="van">Van</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="brand">Brand *</Label>
              <Input
                id="brand"
                placeholder="e.g., Toyota, Honda"
                value={formData.brand}
                onChange={(e) => setFormData({ ...formData, brand: e.target.value })}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="model">Model *</Label>
              <Input
                id="model"
                placeholder="e.g., Vios, Wave 110"
                value={formData.model}
                onChange={(e) => setFormData({ ...formData, model: e.target.value })}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="color">Color</Label>
              <Input
                id="color"
                placeholder="e.g., White, Black"
                value={formData.color}
                onChange={(e) => setFormData({ ...formData, color: e.target.value })}
              />
            </div>
          </div>

          <div className="space-y-4 pt-4 border-t">
            <h4 className="text-sm font-medium">Required Documents</h4>
            
            <div className="space-y-2">
              <Label htmlFor="orcr">Official Receipt / Certificate of Registration (OR/CR) *</Label>
              <div className="flex items-center gap-2">
                <Input
                  id="orcr"
                  type="file"
                  accept="image/*,.pdf"
                  onChange={(e) => setOrcrFile(e.target.files?.[0] || null)}
                  required
                />
                {orcrFile && <CheckCircle className="h-5 w-5 text-green-500" />}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="driverId">Driver's License / Valid ID *</Label>
              <div className="flex items-center gap-2">
                <Input
                  id="driverId"
                  type="file"
                  accept="image/*,.pdf"
                  onChange={(e) => setDriverIdFile(e.target.files?.[0] || null)}
                  required
                />
                {driverIdFile && <CheckCircle className="h-5 w-5 text-green-500" />}
              </div>
            </div>
          </div>

          <Alert>
            <AlertDescription>
              Once submitted, your registration will be reviewed by the admin. You will receive a notification
              via email once your application is approved or if additional information is needed.
            </AlertDescription>
          </Alert>

          <Button type="submit" className="w-full">
            <Upload className="h-4 w-4 mr-2" />
            Submit Registration
          </Button>
        </form>
      </CardContent>
    </Card>
  );
};

// VehicleRenewal Component
const VehicleRenewal = () => {
  const [renewingId, setRenewingId] = useState(null);
  const userVehicles = mockVehicles.filter(v => v.status === 'approved');

  const getDaysUntilExpiry = (expiryDate) => {
    const expiry = new Date(expiryDate);
    const today = new Date();
    const diffTime = expiry.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const handleRenew = (vehicleId) => {
    setRenewingId(vehicleId);
    
    setTimeout(() => {
      alert('Vehicle registration renewed successfully!');
      setRenewingId(null);
    }, 1500);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <RefreshCw className="h-5 w-5" />
            Renewal Management
          </CardTitle>
          <CardDescription>
            Renew your vehicle registrations before they expire
          </CardDescription>
        </CardHeader>
        <CardContent>
          {userVehicles.length === 0 ? (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                You don't have any approved vehicles yet. Please register a vehicle first.
              </AlertDescription>
            </Alert>
          ) : (
            <div className="space-y-4">
              {userVehicles.map((vehicle) => {
                const daysLeft = getDaysUntilExpiry(vehicle.expiryDate);
                const isExpiringSoon = daysLeft <= 30 && daysLeft > 0;
                const isExpired = daysLeft <= 0;

                return (
                  <Card key={vehicle.id} className="border">
                    <CardContent className="pt-6">
                      <div className="flex items-start justify-between">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <h4 className="font-semibold">{vehicle.plateNumber}</h4>
                            {isExpired && <Badge variant="destructive">Expired</Badge>}
                            {isExpiringSoon && <Badge variant="outline" className="border-yellow-500 text-yellow-700">Expiring Soon</Badge>}
                            {!isExpired && !isExpiringSoon && <Badge variant="outline" className="border-green-500 text-green-700">Active</Badge>}
                          </div>
                          <p className="text-sm text-gray-600">
                            {vehicle.brand} {vehicle.model} • {vehicle.vehicleType}
                          </p>
                          <div className="flex items-center gap-2 text-sm">
                            <Calendar className="h-4 w-4 text-gray-400" />
                            <span>
                              Expires: {new Date(vehicle.expiryDate).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                              })}
                            </span>
                          </div>
                          <p className="text-sm">
                            {isExpired ? (
                              <span className="text-red-600 font-medium">Expired {Math.abs(daysLeft)} days ago</span>
                            ) : (
                              <span className={isExpiringSoon ? 'text-yellow-600 font-medium' : 'text-gray-600'}>
                                {daysLeft} days remaining
                              </span>
                            )}
                          </p>
                        </div>

                        <Button
                          onClick={() => handleRenew(vehicle.id)}
                          disabled={renewingId === vehicle.id}
                          size="sm"
                        >
                          {renewingId === vehicle.id ? (
                            <>Processing...</>
                          ) : (
                            <>
                              <RefreshCw className="h-4 w-4 mr-2" />
                              Renew
                            </>
                          )}
                        </Button>
                      </div>

                      {vehicle.renewalHistory.length > 0 && (
                        <div className="mt-4 pt-4 border-t">
                          <p className="text-sm font-medium mb-2">Renewal History:</p>
                          <div className="space-y-1">
                            {vehicle.renewalHistory.map((renewal) => (
                              <div key={renewal.id} className="flex items-center gap-2 text-xs text-gray-600">
                                <CheckCircle className="h-3 w-3 text-green-500" />
                                <span>
                                  Renewed on {new Date(renewal.renewalDate).toLocaleDateString()}
                                </span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <div className="flex items-start gap-3">
            <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
            <div className="space-y-1">
              <p className="text-sm">
                You will receive email reminders 30 days before your registration expires.
              </p>
              <p className="text-sm text-gray-600">
                Renewal extends your registration for one additional year from the current expiry date.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// ParkingSlotGrid Component
const ParkingSlotGrid = () => {
  const [slots, setSlots] = useState([]);
  const [selectedZone, setSelectedZone] = useState('A');
  const [selectedSlot, setSelectedSlot] = useState(null);

  useEffect(() => {
    setSlots(generateMockSlots());
  }, []);

  const zones = ['A', 'B', 'C', 'D'];
  const zoneSlots = slots.filter(s => s.zone === selectedZone);

  const getSlotColor = (status) => {
    switch (status) {
      case 'available':
        return 'bg-green-100 border-green-400 hover:bg-green-200';
      case 'occupied':
        return 'bg-red-100 border-red-400 cursor-not-allowed';
      case 'reserved':
        return 'bg-yellow-100 border-yellow-400 cursor-not-allowed';
      default:
        return 'bg-gray-100 border-gray-400';
    }
  };

  const handleSlotClick = (slot) => {
    if (slot.status === 'available') {
      setSelectedSlot(slot);
    }
  };

  const handleReserve = () => {
    if (selectedSlot) {
      alert(`Slot ${selectedSlot.slotNumber} reserved successfully!`);
      setSlots(slots.map(s => 
        s.id === selectedSlot.id 
          ? { ...s, status: 'reserved' }
          : s
      ));
      setSelectedSlot(null);
    }
  };

  const availableCount = zoneSlots.filter(s => s.status === 'available').length;
  const occupiedCount = zoneSlots.filter(s => s.status === 'occupied').length;
  const reservedCount = zoneSlots.filter(s => s.status === 'reserved').length;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <ParkingSquare className="h-5 w-5" />
            Parking Slot Availability
          </CardTitle>
          <CardDescription>
            View and reserve available parking slots in real-time
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="mb-6 grid grid-cols-3 gap-4">
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <p className="text-sm text-gray-600">Available</p>
              <p className="text-2xl font-bold mt-1">{availableCount}</p>
            </div>
            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
              <p className="text-sm text-gray-600">Occupied</p>
              <p className="text-2xl font-bold mt-1">{occupiedCount}</p>
            </div>
            <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <p className="text-sm text-gray-600">Reserved</p>
              <p className="text-2xl font-bold mt-1">{reservedCount}</p>
            </div>
          </div>

          <Tabs value={selectedZone} onValueChange={setSelectedZone}>
            <TabsList className="grid grid-cols-4 w-full max-w-md mb-6">
              {zones.map(zone => (
                <TabsTrigger key={zone} value={zone}>
                  Zone {zone}
                </TabsTrigger>
              ))}
            </TabsList>

            {zones.map(zone => (
              <TabsContent key={zone} value={zone}>
                <div className="grid grid-cols-5 gap-3">
                  {zoneSlots.map(slot => (
                    <button
                      key={slot.id}
                      onClick={() => handleSlotClick(slot)}
                      disabled={slot.status !== 'available'}
                      className={`
                        p-4 rounded-lg border-2 transition-all
                        ${getSlotColor(slot.status)}
                        ${selectedSlot?.id === slot.id ? 'ring-2 ring-blue-500' : ''}
                      `}
                    >
                      <div className="flex flex-col items-center gap-1">
                        <Car className="h-5 w-5" />
                        <span className="text-xs font-medium">{slot.slotNumber}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </TabsContent>
            ))}
          </Tabs>

          {selectedSlot && (
            <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Selected Slot: <span>{selectedSlot.slotNumber}</span></p>
                  <p className="text-sm text-gray-600">Zone {selectedSlot.zone}</p>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => setSelectedSlot(null)}>
                    Cancel
                  </Button>
                  <Button onClick={handleReserve}>
                    Reserve Slot
                  </Button>
                </div>
              </div>
            </div>
          )}

          <div className="mt-6 flex items-center gap-6 text-sm">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-green-100 border-2 border-green-400 rounded"></div>
              <span>Available</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-red-100 border-2 border-red-400 rounded"></div>
              <span>Occupied</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-yellow-100 border-2 border-yellow-400 rounded"></div>
              <span>Reserved</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// NotificationCenter Component
const NotificationCenter = () => {
  const [notifications, setNotifications] = useState(mockNotifications);

  const unreadCount = notifications.filter(n => !n.read).length;

  const markAsRead = (id) => {
    setNotifications(notifications.map(n => 
      n.id === id ? { ...n, read: true } : n
    ));
  };

  const markAllAsRead = () => {
    setNotifications(notifications.map(n => ({ ...n, read: true })));
  };

  const deleteNotification = (id) => {
    setNotifications(notifications.filter(n => n.id !== id));
  };

  const getNotificationIcon = (type) => {
    const iconClass = "h-5 w-5";
    switch (type) {
      case 'success':
        return <CheckCheck className={`${iconClass} text-green-500`} />;
      case 'warning':
        return <Bell className={`${iconClass} text-yellow-500`} />;
      case 'error':
        return <Bell className={`${iconClass} text-red-500`} />;
      default:
        return <Bell className={`${iconClass} text-blue-500`} />;
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) return 'Just now';
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays === 1) return 'Yesterday';
    if (diffDays < 7) return `${diffDays}d ago`;
    return date.toLocaleDateString();
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notifications
              {unreadCount > 0 && (
                <Badge variant="destructive" className="ml-2">
                  {unreadCount} new
                </Badge>
              )}
            </CardTitle>
            <CardDescription>
              Stay updated with your parking activities
            </CardDescription>
          </div>
          {unreadCount > 0 && (
            <Button variant="outline" size="sm" onClick={markAllAsRead}>
              <CheckCheck className="h-4 w-4 mr-2" />
              Mark all as read
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent>
        {notifications.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            No notifications
          </div>
        ) : (
          <div className="space-y-3">
            {notifications.map((notification) => (
              <div
                key={notification.id}
                className={`p-4 rounded-lg border transition-colors ${
                  !notification.read ? 'bg-blue-50 border-blue-200' : 'bg-white border-gray-200'
                }`}
              >
                <div className="flex items-start gap-3">
                  <div className="mt-0.5">
                    {getNotificationIcon(notification.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1">
                        <h4 className="text-sm font-medium">
                          {notification.title}
                        </h4>
                        <p className="text-sm text-gray-600 mt-1">
                          {notification.message}
                        </p>
                      </div>
                      {!notification.read && (
                        <Badge variant="secondary" className="shrink-0">
                          New
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-3 mt-2">
                      <span className="text-xs text-gray-500">
                        {formatDate(notification.createdAt)}
                      </span>
                      <div className="flex items-center gap-2">
                        {!notification.read && (
                          <button
                            onClick={() => markAsRead(notification.id)}
                            className="text-xs text-blue-600 hover:underline"
                          >
                            <Check className="h-3 w-3 inline mr-1" />
                            Mark as read
                          </button>
                        )}
                        <button
                          onClick={() => deleteNotification(notification.id)}
                          className="text-xs text-red-600 hover:underline"
                        >
                          <Trash2 className="h-3 w-3 inline mr-1" />
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Main Dashboard Component
const ParkingDashboard = () => {
  const [activeSection, setActiveSection] = useState('register');
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const menuItems = [
    { id: 'register', label: 'Register Vehicle', icon: Car },
    { id: 'renew', label: 'Renew Registration', icon: RefreshCw },
    { id: 'parking', label: 'Parking Slots', icon: ParkingSquare },
    { id: 'notifications', label: 'Notifications', icon: Bell }
  ];

  const renderContent = () => {
    switch (activeSection) {
      case 'register':
        return <VehicleRegistrationForm />;
      case 'renew':
        return <VehicleRenewal />;
      case 'parking':
        return <ParkingSlotGrid />;
      case 'notifications':
        return <NotificationCenter />;
      default:
        return <VehicleRegistrationForm />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div
        className={`fixed inset-y-0 left-0 z-50 bg-white border-r border-gray-200 transition-all duration-300 ${
          sidebarOpen ? 'w-64' : 'w-16'
        }`}
        onMouseEnter={() => setSidebarOpen(true)}
        onMouseLeave={() => setSidebarOpen(false)}
      >
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="p-4 border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <Car className="h-5 w-5 text-white" />
              </div>
              {sidebarOpen && (
                <div className="overflow-hidden">
                  <h2 className="font-semibold text-sm">Parking System</h2>
                  <p className="text-xs text-gray-500">PHINMA UI</p>
                </div>
              )}
            </div>
          </div>

          {/* Menu Items */}
          <nav className="flex-1 p-2 space-y-1">
            {menuItems.map((item) => {
              const Icon = item.icon;
              const isActive = activeSection === item.id;
              
              return (
                <button
                  key={item.id}
                  onClick={() => setActiveSection(item.id)}
                  className={`w-full flex items-center gap-3 px-3 py-3 rounded-lg transition-colors ${
                    isActive
                      ? 'bg-blue-50 text-blue-600'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="h-5 w-5 flex-shrink-0" />
                  {sidebarOpen && (
                    <span className="text-sm font-medium overflow-hidden whitespace-nowrap">
                      {item.label}
                    </span>
                  )}
                  {sidebarOpen && isActive && (
                    <ChevronRight className="h-4 w-4 ml-auto" />
                  )}
                </button>
              );
            })}
          </nav>

          {/* Footer */}
          {sidebarOpen && (
            <div className="p-4 border-t border-gray-200">
              <div className="text-xs text-gray-500">
                <p className="font-medium">Student Dashboard</p>
                <p className="mt-1">Version 1.0</p>
              </div>